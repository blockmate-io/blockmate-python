# coding: utf-8

"""
    Blockmate

    Blockmate API OpenAPI documentation  # noqa: E501

    The version of the OpenAPI document: 0.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blockmate import schemas  # noqa: F401


class NftId(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            tokenId = schemas.StrSchema
            
            
            class tokenMetadata(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        tokenType = schemas.StrSchema
                        __annotations__ = {
                            "tokenType": tokenType,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["tokenType"]) -> MetaOapg.properties.tokenType: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["tokenType", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["tokenType"]) -> typing.Union[MetaOapg.properties.tokenType, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tokenType", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    tokenType: typing.Union[MetaOapg.properties.tokenType, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tokenMetadata':
                    return super().__new__(
                        cls,
                        *args,
                        tokenType=tokenType,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "tokenId": tokenId,
                "tokenMetadata": tokenMetadata,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenId"]) -> MetaOapg.properties.tokenId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenMetadata"]) -> MetaOapg.properties.tokenMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tokenId", "tokenMetadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenId"]) -> typing.Union[MetaOapg.properties.tokenId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenMetadata"]) -> typing.Union[MetaOapg.properties.tokenMetadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tokenId", "tokenMetadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tokenId: typing.Union[MetaOapg.properties.tokenId, str, schemas.Unset] = schemas.unset,
        tokenMetadata: typing.Union[MetaOapg.properties.tokenMetadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NftId':
        return super().__new__(
            cls,
            *args,
            tokenId=tokenId,
            tokenMetadata=tokenMetadata,
            _configuration=_configuration,
            **kwargs,
        )
