# coding: utf-8

"""
    Blockmate

    Blockmate API OpenAPI documentation  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blockmate import schemas  # noqa: F401


class Movement(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Movement
    """


    class MetaOapg:
        required = {
            "address",
            "currency_name",
            "currency_symbol",
            "owned",
            "fee",
            "currency",
            "value",
        }
        
        class properties:
            address = schemas.StrSchema
            currency = schemas.StrSchema
            currency_name = schemas.StrSchema
            currency_symbol = schemas.StrSchema
            value = schemas.NumberSchema
            owned = schemas.BoolSchema
            fee = schemas.BoolSchema
            
            
            class image_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class image_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "address": address,
                "currency": currency,
                "currency_name": currency_name,
                "currency_symbol": currency_symbol,
                "value": value,
                "owned": owned,
                "fee": fee,
                "image_name": image_name,
                "image_url": image_url,
            }
    
    address: MetaOapg.properties.address
    currency_name: MetaOapg.properties.currency_name
    currency_symbol: MetaOapg.properties.currency_symbol
    owned: MetaOapg.properties.owned
    fee: MetaOapg.properties.fee
    currency: MetaOapg.properties.currency
    value: MetaOapg.properties.value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_name"]) -> MetaOapg.properties.currency_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_symbol"]) -> MetaOapg.properties.currency_symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owned"]) -> MetaOapg.properties.owned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fee"]) -> MetaOapg.properties.fee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_name"]) -> MetaOapg.properties.image_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_url"]) -> MetaOapg.properties.image_url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["address", "currency", "currency_name", "currency_symbol", "value", "owned", "fee", "image_name", "image_url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_name"]) -> MetaOapg.properties.currency_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_symbol"]) -> MetaOapg.properties.currency_symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owned"]) -> MetaOapg.properties.owned: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fee"]) -> MetaOapg.properties.fee: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_name"]) -> typing.Union[MetaOapg.properties.image_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_url"]) -> typing.Union[MetaOapg.properties.image_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address", "currency", "currency_name", "currency_symbol", "value", "owned", "fee", "image_name", "image_url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        address: typing.Union[MetaOapg.properties.address, str, ],
        currency_name: typing.Union[MetaOapg.properties.currency_name, str, ],
        currency_symbol: typing.Union[MetaOapg.properties.currency_symbol, str, ],
        owned: typing.Union[MetaOapg.properties.owned, bool, ],
        fee: typing.Union[MetaOapg.properties.fee, bool, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, ],
        image_name: typing.Union[MetaOapg.properties.image_name, None, str, schemas.Unset] = schemas.unset,
        image_url: typing.Union[MetaOapg.properties.image_url, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Movement':
        return super().__new__(
            cls,
            *args,
            address=address,
            currency_name=currency_name,
            currency_symbol=currency_symbol,
            owned=owned,
            fee=fee,
            currency=currency,
            value=value,
            image_name=image_name,
            image_url=image_url,
            _configuration=_configuration,
            **kwargs,
        )
