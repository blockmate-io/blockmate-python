# coding: utf-8

"""
    Blockmate

    Blockmate API OpenAPI documentation  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blockmate import schemas  # noqa: F401


class RiskReportCategory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    RiskReportCategory
    """


    class MetaOapg:
        required = {
            "category_name",
            "name",
            "risk",
        }
        
        class properties:
            name = schemas.StrSchema
            category_name = schemas.StrSchema
            
            
            class risk(
                schemas.IntSchema
            ):
                pass
            adress = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "category_name": category_name,
                "risk": risk,
                "adress": adress,
            }
    
    category_name: MetaOapg.properties.category_name
    name: MetaOapg.properties.name
    risk: MetaOapg.properties.risk
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_name"]) -> MetaOapg.properties.category_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["risk"]) -> MetaOapg.properties.risk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adress"]) -> MetaOapg.properties.adress: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "category_name", "risk", "adress", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_name"]) -> MetaOapg.properties.category_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["risk"]) -> MetaOapg.properties.risk: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adress"]) -> typing.Union[MetaOapg.properties.adress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "category_name", "risk", "adress", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        category_name: typing.Union[MetaOapg.properties.category_name, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        risk: typing.Union[MetaOapg.properties.risk, decimal.Decimal, int, ],
        adress: typing.Union[MetaOapg.properties.adress, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RiskReportCategory':
        return super().__new__(
            cls,
            *args,
            category_name=category_name,
            name=name,
            risk=risk,
            adress=adress,
            _configuration=_configuration,
            **kwargs,
        )
