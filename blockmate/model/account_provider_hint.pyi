# coding: utf-8

"""
    Blockmate

    Blockmate API OpenAPI documentation  # noqa: E501

    The version of the OpenAPI document: 0.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blockmate import schemas  # noqa: F401


class AccountProviderHint(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Account provider hint containing info about what is needed to connect such an account
    """


    class MetaOapg:
        required = {
            "account_type",
            "account_name",
            "account_url",
            "icon",
            "description",
            "fields",
            "oauth",
            "url",
            "info",
        }
        
        class properties:
            account_name = schemas.StrSchema
            
            
            class account_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def WALLET(cls):
                    return cls("crypto_wallet")
                
                @schemas.classproperty
                def EXCHANGE(cls):
                    return cls("crypto_exchange")
                
                @schemas.classproperty
                def NFT(cls):
                    return cls("crypto_nft")
            account_url = schemas.StrSchema
            description = schemas.StrSchema
            url = schemas.StrSchema
            
            
            class fields(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        api_key = schemas.StrSchema
                        api_secret = schemas.StrSchema
                        api_passphrase = schemas.StrSchema
                        description = schemas.StrSchema
                        wallet = schemas.StrSchema
                        __annotations__ = {
                            "api_key": api_key,
                            "api_secret": api_secret,
                            "api_passphrase": api_passphrase,
                            "description": description,
                            "wallet": wallet,
                        }
                    additional_properties = schemas.StrSchema
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["api_key"]) -> MetaOapg.properties.api_key: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["api_secret"]) -> MetaOapg.properties.api_secret: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["api_passphrase"]) -> MetaOapg.properties.api_passphrase: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["wallet"]) -> MetaOapg.properties.wallet: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["api_key"], typing_extensions.Literal["api_secret"], typing_extensions.Literal["api_passphrase"], typing_extensions.Literal["description"], typing_extensions.Literal["wallet"], str, ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["api_key"]) -> typing.Union[MetaOapg.properties.api_key, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["api_secret"]) -> typing.Union[MetaOapg.properties.api_secret, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["api_passphrase"]) -> typing.Union[MetaOapg.properties.api_passphrase, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["wallet"]) -> typing.Union[MetaOapg.properties.wallet, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["api_key"], typing_extensions.Literal["api_secret"], typing_extensions.Literal["api_passphrase"], typing_extensions.Literal["description"], typing_extensions.Literal["wallet"], str, ]):
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    api_key: typing.Union[MetaOapg.properties.api_key, str, schemas.Unset] = schemas.unset,
                    api_secret: typing.Union[MetaOapg.properties.api_secret, str, schemas.Unset] = schemas.unset,
                    api_passphrase: typing.Union[MetaOapg.properties.api_passphrase, str, schemas.Unset] = schemas.unset,
                    description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                    wallet: typing.Union[MetaOapg.properties.wallet, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'fields':
                    return super().__new__(
                        cls,
                        *args,
                        api_key=api_key,
                        api_secret=api_secret,
                        api_passphrase=api_passphrase,
                        description=description,
                        wallet=wallet,
                        _configuration=_configuration,
                        **kwargs,
                    )
            oauth = schemas.BoolSchema
            icon = schemas.StrSchema
            intro = schemas.StrSchema
            __annotations__ = {
                "account_name": account_name,
                "account_type": account_type,
                "account_url": account_url,
                "description": description,
                "url": url,
                "fields": fields,
                "oauth": oauth,
                "icon": icon,
                "intro": intro,
            }
    
    account_type: MetaOapg.properties.account_type
    account_name: MetaOapg.properties.account_name
    account_url: MetaOapg.properties.account_url
    icon: MetaOapg.properties.icon
    description: MetaOapg.properties.description
    fields: MetaOapg.properties.fields
    oauth: MetaOapg.properties.oauth
    url: MetaOapg.properties.url
    info: schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_name"]) -> MetaOapg.properties.account_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_type"]) -> MetaOapg.properties.account_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_url"]) -> MetaOapg.properties.account_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oauth"]) -> MetaOapg.properties.oauth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon"]) -> MetaOapg.properties.icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intro"]) -> MetaOapg.properties.intro: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_name", "account_type", "account_url", "description", "url", "fields", "oauth", "icon", "intro", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_name"]) -> MetaOapg.properties.account_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_type"]) -> MetaOapg.properties.account_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_url"]) -> MetaOapg.properties.account_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oauth"]) -> MetaOapg.properties.oauth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon"]) -> MetaOapg.properties.icon: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intro"]) -> typing.Union[MetaOapg.properties.intro, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_name", "account_type", "account_url", "description", "url", "fields", "oauth", "icon", "intro", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        account_type: typing.Union[MetaOapg.properties.account_type, str, ],
        account_name: typing.Union[MetaOapg.properties.account_name, str, ],
        account_url: typing.Union[MetaOapg.properties.account_url, str, ],
        icon: typing.Union[MetaOapg.properties.icon, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        fields: typing.Union[MetaOapg.properties.fields, dict, frozendict.frozendict, ],
        oauth: typing.Union[MetaOapg.properties.oauth, bool, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        info: typing.Union[MetaOapg.properties.info, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        intro: typing.Union[MetaOapg.properties.intro, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccountProviderHint':
        return super().__new__(
            cls,
            *args,
            account_type=account_type,
            account_name=account_name,
            account_url=account_url,
            icon=icon,
            description=description,
            fields=fields,
            oauth=oauth,
            url=url,
            info=info,
            intro=intro,
            _configuration=_configuration,
            **kwargs,
        )
