# coding: utf-8

"""
    Blockmate

    Blockmate API OpenAPI documentation  # noqa: E501

    The version of the OpenAPI document: 0.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blockmate import schemas  # noqa: F401


class OwnedNft(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    OwnedNft
    """


    class MetaOapg:
        
        class properties:
            
            
            class contract(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        address = schemas.StrSchema
                        __annotations__ = {
                            "address": address,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["address", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'contract':
                    return super().__new__(
                        cls,
                        *args,
                        address=address,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def id() -> typing.Type['NftId']:
                return NftId
            balance = schemas.StrSchema
            title = schemas.StrSchema
            description = schemas.StrSchema
        
            @staticmethod
            def tokenUri() -> typing.Type['NftTokenUri']:
                return NftTokenUri
            
            
            class media(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        raw = schemas.StrSchema
                        gateway = schemas.StrSchema
                        thumbnail = schemas.StrSchema
                        format = schemas.StrSchema
                        bytes = schemas.IntSchema
                        __annotations__ = {
                            "raw": raw,
                            "gateway": gateway,
                            "thumbnail": thumbnail,
                            "format": format,
                            "bytes": bytes,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["raw"]) -> MetaOapg.properties.raw: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["gateway"]) -> MetaOapg.properties.gateway: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["thumbnail"]) -> MetaOapg.properties.thumbnail: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bytes"]) -> MetaOapg.properties.bytes: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["raw", "gateway", "thumbnail", "format", "bytes", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["raw"]) -> typing.Union[MetaOapg.properties.raw, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["gateway"]) -> typing.Union[MetaOapg.properties.gateway, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["thumbnail"]) -> typing.Union[MetaOapg.properties.thumbnail, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> typing.Union[MetaOapg.properties.format, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bytes"]) -> typing.Union[MetaOapg.properties.bytes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["raw", "gateway", "thumbnail", "format", "bytes", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    raw: typing.Union[MetaOapg.properties.raw, str, schemas.Unset] = schemas.unset,
                    gateway: typing.Union[MetaOapg.properties.gateway, str, schemas.Unset] = schemas.unset,
                    thumbnail: typing.Union[MetaOapg.properties.thumbnail, str, schemas.Unset] = schemas.unset,
                    format: typing.Union[MetaOapg.properties.format, str, schemas.Unset] = schemas.unset,
                    bytes: typing.Union[MetaOapg.properties.bytes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'media':
                    return super().__new__(
                        cls,
                        *args,
                        raw=raw,
                        gateway=gateway,
                        thumbnail=thumbnail,
                        format=format,
                        bytes=bytes,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def metadata() -> typing.Type['Metadata']:
                return Metadata
            timeLastUpdated = schemas.StrSchema
            error = schemas.StrSchema
        
            @staticmethod
            def contractMetadata() -> typing.Type['NftContractMetadata']:
                return NftContractMetadata
        
            @staticmethod
            def spamInfo() -> typing.Type['NftSpamInfo']:
                return NftSpamInfo
            __annotations__ = {
                "contract": contract,
                "id": id,
                "balance": balance,
                "title": title,
                "description": description,
                "tokenUri": tokenUri,
                "media": media,
                "metadata": metadata,
                "timeLastUpdated": timeLastUpdated,
                "error": error,
                "contractMetadata": contractMetadata,
                "spamInfo": spamInfo,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract"]) -> MetaOapg.properties.contract: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'NftId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenUri"]) -> 'NftTokenUri': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media"]) -> MetaOapg.properties.media: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'Metadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeLastUpdated"]) -> MetaOapg.properties.timeLastUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractMetadata"]) -> 'NftContractMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spamInfo"]) -> 'NftSpamInfo': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contract", "id", "balance", "title", "description", "tokenUri", "media", "metadata", "timeLastUpdated", "error", "contractMetadata", "spamInfo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract"]) -> typing.Union[MetaOapg.properties.contract, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union['NftId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance"]) -> typing.Union[MetaOapg.properties.balance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenUri"]) -> typing.Union['NftTokenUri', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media"]) -> typing.Union[MetaOapg.properties.media, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union['Metadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeLastUpdated"]) -> typing.Union[MetaOapg.properties.timeLastUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union[MetaOapg.properties.error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractMetadata"]) -> typing.Union['NftContractMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spamInfo"]) -> typing.Union['NftSpamInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contract", "id", "balance", "title", "description", "tokenUri", "media", "metadata", "timeLastUpdated", "error", "contractMetadata", "spamInfo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contract: typing.Union[MetaOapg.properties.contract, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        id: typing.Union['NftId', schemas.Unset] = schemas.unset,
        balance: typing.Union[MetaOapg.properties.balance, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        tokenUri: typing.Union['NftTokenUri', schemas.Unset] = schemas.unset,
        media: typing.Union[MetaOapg.properties.media, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        metadata: typing.Union['Metadata', schemas.Unset] = schemas.unset,
        timeLastUpdated: typing.Union[MetaOapg.properties.timeLastUpdated, str, schemas.Unset] = schemas.unset,
        error: typing.Union[MetaOapg.properties.error, str, schemas.Unset] = schemas.unset,
        contractMetadata: typing.Union['NftContractMetadata', schemas.Unset] = schemas.unset,
        spamInfo: typing.Union['NftSpamInfo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OwnedNft':
        return super().__new__(
            cls,
            *args,
            contract=contract,
            id=id,
            balance=balance,
            title=title,
            description=description,
            tokenUri=tokenUri,
            media=media,
            metadata=metadata,
            timeLastUpdated=timeLastUpdated,
            error=error,
            contractMetadata=contractMetadata,
            spamInfo=spamInfo,
            _configuration=_configuration,
            **kwargs,
        )

from blockmate.model.metadata import Metadata
from blockmate.model.nft_contract_metadata import NftContractMetadata
from blockmate.model.nft_id import NftId
from blockmate.model.nft_spam_info import NftSpamInfo
from blockmate.model.nft_token_uri import NftTokenUri
